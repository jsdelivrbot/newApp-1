{"version":3,"sources":["../../../src/@ionic-native/plugins/launch-navigator/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\nexport interface LaunchNavigatorOptions {\n\n  /**\n   * name of the navigation app to use for directions. Specify using launchnavigator.APP constants. If not specified, defaults to User Selection.\n   */\n  app?: string;\n\n  /**\n   * nickname to display in app for destination. e.g. \"Bob's House\".\n   */\n  destinationName?: string;\n\n  /**\n   * Start point of the navigation\n   */\n  start?: string | number[];\n\n  /**\n   * nickname to display in app for start . e.g. \"My House\".\n   */\n  startName?: string;\n\n  /**\n   * Transportation mode for navigation: \"driving\", \"walking\" or \"transit\". Defaults to \"driving\" if not specified.\n   */\n  transportMode?: string;\n\n  /**\n   * If true, debug log output will be generated by the plugin. Defaults to false.\n   */\n  enableDebug?: boolean;\n\n  /**\n   * a key/value map of extra app-specific parameters. For example, to tell Google Maps on Android to display Satellite view in \"maps\" launch mode: `{\"t\": \"k\"}`\n   */\n  extras?: any;\n\n  /**\n   * (Android only) mode in which to open Google Maps app: \"maps\" or \"turn-by-turn\". Defaults to \"maps\" if not specified. Specify using launchnavigator.LAUNCH_MODE constants.\n   */\n  launchMode?: string;\n\n  /**\n   * text to display in the native picker which enables user to select which navigation app to launch. Defaults to \"Select app for navigation\" if not specified.\n   */\n  appSelectionDialogHeader?: string;\n\n  /**\n   * text to display for the cancel button in the native picker which enables user to select which navigation app to launch. Defaults to \"Cancel\" if not specified.\n   */\n  appSelectionCancelButton?: string;\n\n  successCallback?: Function;\n\n  errorCallback?: Function;\n}\n\n/**\n * @name Launch Navigator\n * @description\n * Requires Cordova plugin: uk.co.workingedge.phonegap.plugin.launchnavigator. For more info, please see the [LaunchNavigator plugin docs](https://github.com/dpa99c/phonegap-launch-navigator).\n *\n * @usage\n * Please refer to the plugin's repo for detailed usage. This docs page only explains the Native wrapper.\n *\n * ```typescript\n * import { LaunchNavigator, LaunchNavigatorOptions } from '@ionic-native/launch-navigator';\n *\n * constructor(private launchNavigator: LaunchNavigator) { }\n *\n * ...\n *\n * let options: LaunchNavigatorOptions = {\n *   start: 'London, ON',\n *   app: LaunchNavigator.APPS.UBER\n * };\n *\n * this.launchNavigator.navigate('Toronto, ON', options)\n *   .then(\n *     success => console.log('Launched navigator'),\n *     error => console.log('Error launching navigator', error)\n *   );\n * ```\n * @interfaces\n * LaunchNavigatorOptions\n */\n@Plugin({\n  pluginName: 'LaunchNavigator',\n  plugin: 'uk.co.workingedge.phonegap.plugin.launchnavigator',\n  pluginRef: 'launchnavigator',\n  repo: 'https://github.com/dpa99c/phonegap-launch-navigator',\n  platforms: ['Android', 'iOS', 'Windows', 'Windows Phone 8']\n})\n\nexport class LaunchNavigator extends IonicNativePlugin {\n\n  /**\n   * Launches navigator app\n   * @param destination {string|number[]} Location name or coordinates (as string or array)\n   * @param options {LaunchNavigatorOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  navigate(\n    destination: string | number[],\n    options?: LaunchNavigatorOptions\n    ): Promise<any> { return; }\n\n  /**\n   * Determines if the given app is installed and available on the current device.\n   * @param app {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  isAppAvailable(app: string): Promise<any> { return; }\n\n  /**\n   * Returns a list indicating which apps are installed and available on the current device.\n   * @returns {Promise<string[]>}\n   */\n  @Cordova()\n  availableApps(): Promise<string[]> { return; }\n\n  /**\n   * Returns the display name of the specified app.\n   * @param app {string}\n   * @returns {string}\n   */\n  @Cordova({ sync: true })\n  getAppDisplayName(app: string): string { return; }\n\n  /**\n   * Returns list of supported apps on a given platform.\n   * @param platform {string}\n   * @returns {string[]}\n   */\n  @Cordova({ sync: true })\n  getAppsForPlatform(platform: string): string[] { return; }\n\n  /**\n   * Indicates if an app on a given platform supports specification of transport mode.\n   * @param app {string} specified as a string, you can use one of the constants, e.g `LaunchNavigator.APP.GOOGLE_MAPS`\n   * @param platform {string}\n   * @returns {boolean}\n   */\n  @Cordova({ sync: true })\n  supportsTransportMode(app: string, platform: string): boolean { return; }\n\n  /**\n   * Returns the list of transport modes supported by an app on a given platform.\n   * @param app {string}\n   * @param platform {string}\n   * @returns {string[]}\n   */\n  @Cordova({ sync: true })\n  getTransportModes(app: string, platform: string): string[] { return; }\n\n  /**\n   * Indicates if an app on a given platform supports specification of launch mode.\n   * Note that currently only Google Maps on Android does.\n   * @param app {string}\n   * @param platform {string}\n   * @returns {boolean}\n   */\n  @Cordova({ sync: true })\n  supportsLaunchMode(app: string, platform: string): boolean { return; }\n\n  /**\n   * Indicates if an app on a given platform supports specification of start location.\n   * @param app {string}\n   * @param platform {string}\n   * @returns {boolean}\n   */\n  @Cordova({ sync: true })\n  supportsStart(app: string, platform: string): boolean { return; }\n\n  /**\n   * @param app {string}\n   * @param platform {string}\n   * @returns {boolean}\n   */\n  @Cordova({ sync: true })\n  supportsStartName(app: string, platform: string): boolean { return; }\n\n  /**\n   * @param app {string}\n   * @param platform {string}\n   * @returns {boolean}\n   */\n  @Cordova({ sync: true })\n  supportsDestName(app: string, platform: string): boolean { return; }\n\n  /**\n   * @param destination {string | number[]}\n   * @param options {LaunchNavigatorOptions}\n   */\n  @Cordova({ sync: true })\n  userSelect(destination: string | number[], options: LaunchNavigatorOptions): void { }\n\n  APP: any = {\n    USER_SELECT: 'user_select',\n    APPLE_MAPS: 'apple_maps',\n    GOOGLE_MAPS: 'google_maps',\n    WAZE: 'waze',\n    CITYMAPPER: 'citymapper',\n    NAVIGON: 'navigon',\n    TRANSIT_APP: 'transit_app',\n    YANDEX: 'yandex',\n    UBER: 'uber',\n    TOMTOM: 'tomtom',\n    BING_MAPS: 'bing_maps',\n    SYGIC: 'sygic',\n    HERE_MAPS: 'here_maps',\n    MOOVIT: 'moovit'\n  };\n\n  TRANSPORT_MODE: any = {\n    DRIVING: 'driving',\n    WALKING: 'walking',\n    BICYCLING: 'bicycling',\n    TRANSIT: 'transit'\n  };\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}